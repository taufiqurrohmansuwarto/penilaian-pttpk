generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  custom_id                           String                     @id
  username                            String?
  image                               String?
  id                                  String?
  from                                String?
  role                                String?
  group                               String?
  employee_number                     String?
  discussions_posts                   discussions_posts[]
  discussions_votes                   discussions_votes[]
  discussions_rights_user             discussions_rights[]       @relation("user")
  discussions_rights_user_assigned    discussions_rights[]       @relation("assigned_user")
  feedbacks                           feedbacks[]
  discussions_posts_joined            discussions_posts_joined[]
  acc_kinerja_bulanan_pegawai         acc_kinerja_bulanan[]      @relation("acc_pegawai")
  acc_kinerja_bulanan_atasan_langsung acc_kinerja_bulanan[]      @relation("acc_atasan_langsung")
  penilaian                           penilaian[]
  comments_notifications_sender       comments_notifications[]   @relation("user_sender")
  comments_notifications_receiver     comments_notifications[]   @relation("user_receiver")
  comments                            comments[]
}

model acc_kinerja_bulanan {
  id_penilaian       String
  bulan              Int        @db.SmallInt
  tahun              Int        @db.SmallInt
  sudah_verif        Boolean?   @default(false)
  created_at         DateTime?  @default(now()) @db.Timestamp(6)
  updated_at         DateTime?  @db.Timestamp(6)
  penilaian          penilaian? @relation(fields: [id_penilaian], references: [id], onDelete: Cascade)
  id_atasan_langsung String?
  pegawai_id         String?
  atasan_langsung    users?     @relation("acc_atasan_langsung", fields: [id_atasan_langsung], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
  pegawai            users?     @relation("acc_pegawai", fields: [pegawai_id], references: [custom_id])

  @@id([id_penilaian, bulan, tahun])
}

model kinerja_bulanan {
  id_penilaian        String
  tahun               Int               @db.SmallInt
  bulan               Int               @db.SmallInt
  id_target_penilaian String?
  title               String?
  kuantitas           Int?
  kualitas            Int?              @default(0)
  start               DateTime?         @db.Timestamp(6)
  end                 DateTime?         @db.Timestamp(6)
  created_at          DateTime?         @default(now()) @db.Timestamp(6)
  updated_at          DateTime?         @db.Timestamp(6)
  penilaian           penilaian?        @relation(fields: [id_penilaian], references: [id], onDelete: Cascade)
  target_penilaian    target_penilaian? @relation(fields: [id_target_penilaian], references: [id], onDelete: Cascade)

  @@id([id_penilaian, bulan, tahun])
}

model penilaian {
  id                  String                @id @default(cuid())
  user_custom_id      String
  tahun               Int?                  @db.SmallInt
  id_skpd             String?               @db.VarChar(200)
  skpd                Json?
  id_jabatan          String?               @db.VarChar(200)
  jabatan             Json?
  aktif               Boolean?              @default(false)
  sudah_verif         Boolean?              @default(false)
  diverif_oleh        String?               @db.VarChar(200)
  awal_periode        DateTime              @db.Date
  akhir_periode       DateTime              @db.Date
  nip_atasan_langsung String?               @db.VarChar(200)
  atasan_langsung     Json?
  nip_atasan_banding  String?               @db.VarChar(200)
  atasan_banding      Json?
  nip_eselon_ii       String?               @db.VarChar(200)
  eselon_ii           Json?
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?             @db.Timestamp(6)
  pekerjaan_tambahan  String[]
  acc_kinerja_bulanan acc_kinerja_bulanan[]
  kinerja_bulanan     kinerja_bulanan[]
  target_penilaian    target_penilaian[]

  pegawai users @relation(fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
}

model ref_satuan_kinerja {
  id               Int                @id @default(autoincrement())
  nama             String?            @db.VarChar(200)
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  updated_at       DateTime?          @db.Timestamp(6)
  target_penilaian target_penilaian[]
}

model target_penilaian {
  id                    String     @id @default(cuid())
  pekerjaan             String?
  ref_satuan_kinerja_id Int?
  kuantitas             Int?
  id_penilaian          String?
  created_at            DateTime?  @default(now()) @db.Timestamp(6)
  updated_at            DateTime?  @db.Timestamp(6)
  penilaian             penilaian? @relation(fields: [id_penilaian], references: [id], onDelete: Cascade)

  ref_satuan_kinerja ref_satuan_kinerja? @relation(fields: [ref_satuan_kinerja_id], references: [id], onDelete: Cascade)
  kinerja_bulanan    kinerja_bulanan[]
}

model comments {
  id             String          @id @default(cuid())
  comment        String?
  user_custom_id String
  comments_tags  comments_tags[]
  likes          Int             @default(0)
  dislikes       Int             @default(0)
  parent_id      String?
  parent         comments?       @relation("SubComments", fields: [parent_id], references: [id], onDelete: Cascade)
  children       comments[]      @relation("SubComments")
  created_at     DateTime?       @default(now()) @db.Timestamp(6)
  updated_at     DateTime?       @db.Timestamp(6)

  user users @relation(fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)

  comments_mentioned     comments_mentioned[]
  comments_notifications comments_notifications[]
  comments_likes         comments_likes[]
}

model comments_likes {
  comment_id     String
  user_custom_id String
  value          Int?
  comments       comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@id([comment_id, user_custom_id])
}

model comments_mentioned {
  comment_id     String
  user_custom_id String
  comments       comments  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @db.Timestamp(6)

  @@id([comment_id, user_custom_id])
}

model comments_notifications {
  id         String  @id @default(cuid())
  comment_id String?
  sender     String?
  receiver   String?

  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  user_sender_notification   users? @relation("user_sender", fields: [sender], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
  user_receiver_notification users? @relation("user_receiver", fields: [receiver], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
}

model tags {
  id            Int             @id @default(autoincrement())
  name          String?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @db.Timestamp(6)
  comments_tags comments_tags[]
}

model comments_tags {
  comment_id String
  tag_id     Int
  comments   comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  tags       tags?     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([comment_id, tag_id])
}

model votes {
  id         String     @id @default(cuid())
  title      String?
  is_end     Boolean    @default(false)
  end_date   DateTime?  @db.Timestamp(6)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @db.Timestamp(6)
  subvotes   subvotes[]
}

model subvotes {
  id            String    @id @default(cuid())
  subvote_title String
  vote_id       String
  votes         votes     @relation(fields: [vote_id], references: [id], onDelete: Cascade)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)

  subvotes_count subvotes_count[]
}

model subvotes_count {
  subvote_id     String
  user_custom_id String

  subvotes subvotes @relation(fields: [subvote_id], references: [id], onDelete: Cascade)

  @@id([subvote_id, user_custom_id])
}

model feedbacks {
  user_custom_id String
  date           DateTime  @db.Date
  descriptiom    String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @db.Timestamp(6)

  user users @relation(fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_custom_id, date])
}

// reddits
model discussions_posts {
  id             String              @id @default(cuid())
  parent_id      String?
  title          String?
  content        String?
  link           String?
  user_custom_id String
  status         String?
  parent         discussions_posts?  @relation("SubDiscussionsPosts", fields: [parent_id], references: [id], onDelete: Cascade)
  children       discussions_posts[] @relation("SubDiscussionsPosts")


  post_id           String?
  parent_comments   discussions_posts?  @relation("SubDiscussionsComments", fields: [post_id], references: [id], onDelete: Cascade)
  children_comments discussions_posts[] @relation("SubDiscussionsComments")

  image_list         Json?
  type               String?
  votes              Int?                 @default(0)
  downvotes          Int?                 @default(0)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  rules              Json?
  discussions_votes  discussions_votes[]
  discussions_ranks  discussions_ranks[]
  discussions_rights discussions_rights[]

  user                     users                      @relation(fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
  discussions_posts_joined discussions_posts_joined[]
  discussions_posts_topics discussions_posts_topics[]
}

model topics {
  topic                    String                     @id
  discussions_posts_topics discussions_posts_topics[]
}

model discussions_posts_topics {
  discussion_id String
  id_topic      String

  discussions_posts discussions_posts @relation(fields: [discussion_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topic             topics            @relation(fields: [id_topic], references: [topic], onDelete: Cascade, onUpdate: Cascade)


  @@id([discussion_id, id_topic])
}

model discussions_votes {
  discussion_post_id String
  user_custom_id     String
  vlag               Int?

  discussions_posts discussions_posts @relation(fields: [discussion_post_id], references: [id], onDelete: Cascade)
  user              users             @relation(fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([discussion_post_id, user_custom_id])
}

model discussions_ranks {
  discussion_post_id String
  hot                Int?   @default(0)
  new                Int?   @default(0)
  raising            Int?   @default(0)
  controversial      Int?   @default(0)
  top                Int?   @default(0)

  discussions_posts discussions_posts @relation(fields: [discussion_post_id], references: [id], onDelete: Cascade)
  @@id([discussion_post_id])
}

model discussions_rights {
  id                      String  @id @default(cuid())
  discussion_post_id      String
  property                String?
  user_custom_id          String
  assigned_user_custom_id String
  user                    users   @relation("user", fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
  assigned_user           users   @relation("assigned_user", fields: [assigned_user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)

  discussions_posts discussions_posts @relation(fields: [discussion_post_id], references: [id], onDelete: Cascade)
}

model discussions_posts_joined {
  user_custom_id     String
  discussion_post_id String
  type               String @default("user")

  user       users             @relation(fields: [user_custom_id], references: [custom_id], onDelete: Cascade, onUpdate: Cascade)
  discussion discussions_posts @relation(fields: [discussion_post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@id([user_custom_id, discussion_post_id])
}
